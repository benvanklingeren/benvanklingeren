/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct css rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-rule(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Applies the correct css rules needed to have an element transition between elevations.
 * This mixin should be applied to elements whose elevation values will change depending on their
 * context (e.g. when active or disabled).
 */
body {
  margin: 0px; }

h1 {
  margin: 5px;
  margin-top: 10px; }

.container {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  height: auto;
  width: 100vw;
  min-height: 100vh;
  background-color: white; }

.container-top {
  z-index: 2;
  display: flex;
  align-self: flex-start;
  height: 7vh;
  width: 100vw;
  margin-top: 0px;
  margin-bottom: 5px;
  box-shadow: 0px 4px 5px -2px rgba(0, 0, 0, 0.2), 0px 7px 10px 1px rgba(0, 0, 0, 0.14); }

.container-center {
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 70%;
  background-color: white;
  margin: auto;
  margin-top: 0px; }

.container-bottom {
  display: flex;
  align-self: flex-end;
  flex-direction: row-reverse;
  height: auto;
  width: 100vw;
  margin: auto;
  margin-bottom: 0px; }

.card {
  margin: 10px; }

#footer {
  color: grey;
  margin-right: 5px;
  margin-bottom: 5px; }

@media only screen and (max-width: 768px) {
  /* For mobile phones: */
  .container-center {
    width: 100%; } }

/*# sourceMappingURL=style.css.map */
